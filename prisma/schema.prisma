generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Session {
    id        String   @id @map("_id")
    userId    String   @db.ObjectId
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  }

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  message   String
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  like      Int?       @default(0)
  userliked Like[]
  comments  Comment[]
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  firstName   String
  lastName    String
  email       String       @unique
  password    String
  phone       String?      @unique
  country     String?
  city        String?
  dateofbirth DateTime?
  posts       Post[]
  likes       Like[]
  comments    Comment[]
  experiences experience[]
  jobs        Jobs[]
  followers   Follower[]   @relation("following")
  following   Follower[]   @relation("follower")
  sessions    Session[]
}

model experience {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  title       String
  company     String
  location    String
  from        DateTime
  to          DateTime @default(now())
  current     Boolean
  type        String
  description String
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  message   String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
}

model Jobs {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  title       String
  company     String
  location    String
  type        String
  from        DateTime?
  to          DateTime?
  description String
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
}

model Follower {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String @db.ObjectId
  followingId String @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId], name: "unique_follow")
}
